unit UProduto;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, UPadrao, Data.DB, Vcl.Mask, Vcl.DBCtrls,
  Vcl.StdCtrls, Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids;

type
  TProduto = class(TCollectionItem)
  private
    FDescricao: String;
    FNome: String;
    FBarra: String;
    FPreco: String;
    FCodigo: String;
  public
    property Descricao: String read FDescricao write FDescricao;
    property Nome: String read FNome write FNome;
    property Barra: String read FBarra write FBarra;
    property Preco: String read FPreco write FPreco;
    property Codigo: String read FCodigo write FCodigo;
    procedure Gravar;
  end;
  TProdutos = class (TCollection)
  private
    function GetItem(Index: Integer): TProduto;
  public
    function Add: TProduto;
    property Item[Index: Integer]: TProduto read GetItem;
  end;

  TFProduto = class(TFPadrao)
    DBEdit1: TDBEdit;
    Label1: TLabel;
    DBEdit2: TDBEdit;
    Label2: TLabel;
    DBEdit3: TDBEdit;
    Label3: TLabel;
    DBEdit4: TDBEdit;
    Label6: TLabel;
    procedure Importar; override;
    procedure Imprimir; override;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FProduto: TFProduto;

implementation

{$R *.dfm}

uses UDataMod, UFuncoes;

{ TFProduto }

procedure TFProduto.Importar;
Var
  tmp: TProduto;
  I : Integer;
begin
  if not dm.OpenDialog.Execute then
    Exit;
  dm.XMLDoc.LoadFromFile(dm.OpenDialog.FileName);
  Produtos := TList.Create;
  try
    for I := 0 to dm.XMLDoc.DocumentElement.ChildNodes.Count - 1 do
    begin
      tmp := TProduto.Create;
      with tmp, dm.XMLDoc, dm.XMLDoc.DocumentElement.ChildNodes[I] do
      begin
        Descricao := ChildNodes['DESCRICAO'].Text;
        Nome := ChildNodes['NOME'].Text;
        Barra := ChildNodes['BARRAS'].Text;
        Preco := ChildNodes['PRECO_CONSUMIDOR'].Text;
        Codigo := ChildNodes['CODIGO'].Text;
        //Gravar;
      end;
      Produtos.Add(tmp);
    end;
  finally
    dm.XMLDoc.XML.Clear;
  end;
end;

procedure TFProduto.Imprimir;
begin
  dm.frxProduto.ShowReport;
end;

{ TProduto }

procedure TProduto.Gravar;
begin
  Codigo := IntToStr(StrToIntDef(Codigo, 0));
  dm.CDSProduto.IndexFieldNames := 'ID';
  if dm.CDSProduto.Locate('ID', Codigo, [loCaseInsensitive, loPartialKey]) then
    dm.CDSProduto.Edit
  else
  begin
    dm.CDSProduto.Append;
    dm.CDSProdutoID.AsInteger := StrToInt(Codigo);
  end;
  dm.CDSProdutoDESCRICAO.AsString := Descricao;
  dm.CDSProdutoNOME.AsString := Nome;
  dm.CDSProdutoBARRAS.AsString := Barra;
  dm.CDSProdutoPRECO.AsFloat := StrToFloatDef(SomenteNumero(Preco),0.00);
  dm.CDSProduto.Post;
end;

end.
