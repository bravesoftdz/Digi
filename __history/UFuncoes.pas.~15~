unit UFuncoes;

interface

uses DbClient, DB, Forms, Controls, StdCtrls, Graphics, Dialogs,
  Windows, Variants, SysUtils, DBGrids, Classes, DBCtrls, Buttons;

procedure StatusCDS(ACds: TClientDataSet);
procedure ChangeDBNav(ADbNav: TDBNavigator; ADataSource: TObject);
procedure ClickRefresh(ADs: TDataSource);
function ExecSQL(ASql: String): Variant; overload;
procedure ExecSQL(ASql: String; AFecha: Boolean); overload;

const
  CAPTIONINPUTBOX = String('Digi');

implementation

uses UPadrao, UDataMod;

procedure StatusCDS(ACds: TClientDataSet);
begin
  if ACds.State in [dsEdit, dsinsert] then
    Exit;
  if ACds.RecordCount = 0 then
    ACds.Append
  else
    ACds.Edit;
end;

procedure ChangeDBNav(ADbNav: TDBNavigator; ADataSource: TObject);
begin
  with ADbNav do
  begin
    Controls[0].Enabled := not (TDataSource(ADataSource).State in [dsEdit, dsInsert]);
    Controls[1].Enabled := Controls[0].Enabled;
    Controls[2].Enabled := Controls[0].Enabled;
    Controls[3].Enabled := not Controls[0].Enabled;
    Controls[4].Enabled := not Controls[0].Enabled;
    Controls[5].Enabled := Controls[0].Enabled;
  end;
end;

procedure ClickRefresh(ADs: TDataSource);
begin
  TClientDataSet(Ads.DataSet).Close;
  TClientDataSet(Ads.DataSet).Open;
end;

procedure ExecSQL(ASql: String; AFecha: Boolean);
begin
  DM.QExec.SQL.Text := ASql;
  try
    DM.QExec.ExecSql;
  except
    on E: Exception do
      showmessage(E.Message + #13 + ASql);
  end;
  if AFecha then
    DM.QExec.Close;
end;

function ExecSQL(ASql: String): Variant;
begin
  DM.QExec.SQL.Text := ASql;
  DM.QExec.Open;
  Result := DM.QExec.Fields[0].AsVariant;
  DM.QExec.Close;
end;

end.
