unit UDataMod;

interface

uses
  SysUtils, Classes, DB, DBClient, MConnect, SConnect, Windows, IniFiles, Forms,
  Variants, Dialogs, DateUtils, Graphics, ImgList, Controls, DBCtrls,
  Data.DBXDataSnap, IndyPeerImpl, Data.DBXCommon, Datasnap.DSConnect,
  Data.SqlExpr, Data.FMTBcd, Data.DBXFirebird, Datasnap.Provider;

type
  TDm = class(TDataModule)
    CDSProduto: TClientDataSet;
    CDSProdutoTMax: TAggregateField;
    OpenDialog: TOpenDialog;
    ImageList1: TImageList;
    ImageList2: TImageList;
    SQLConnection: TSQLConnection;
    QProduto: TSQLDataSet;
    DSPProduto: TDataSetProvider;
    QProdutoID: TIntegerField;
    QProdutoDESCRICAO: TStringField;
    QProdutoNOME: TStringField;
    QProdutoBARRAS: TStringField;
    QProdutoPRECO: TFMTBCDField;
    CDSProdutoID: TIntegerField;
    CDSProdutoDESCRICAO: TStringField;
    CDSProdutoNOME: TStringField;
    CDSProdutoBARRAS: TStringField;
    CDSProdutoPRECO: TFMTBCDField;
    QExec: TSQLQuery;
    CDSCliente: TClientDataSet;
    CDSClienteTMax: TAggregateField;
    QCliente: TSQLDataSet;
    DSPCliente: TDataSetProvider;
    QClienteID: TIntegerField;
    QClienteNOME: TStringField;
    QClienteCIDADE: TStringField;
    QClienteTELEFONE: TStringField;
    CDSClienteID: TIntegerField;
    CDSClienteNOME: TStringField;
    CDSClienteCIDADE: TStringField;
    CDSClienteTELEFONE: TStringField;
    DSVenda: TDataSource;
    CDSVenda: TClientDataSet;
    CDSVendaTMax: TAggregateField;
    QVenda: TSQLDataSet;
    DSPVenda: TDataSetProvider;
    QVendaID: TIntegerField;
    QVendaCLIENTES_ID: TIntegerField;
    QVendaDATAVENDA: TDateField;
    QVendaTOTALVENDIDO: TFMTBCDField;
    QVendaOBS: TBlobField;
    CDSVendaID: TIntegerField;
    CDSVendaCLIENTES_ID: TIntegerField;
    CDSVendaDATAVENDA: TDateField;
    CDSVendaTOTALVENDIDO: TFMTBCDField;
    CDSVendaOBS: TBlobField;
    CDSItemVenda: TClientDataSet;
    AggregateField1: TAggregateField;
    QItemVenda: TSQLDataSet;
    QItemVendaID: TIntegerField;
    QItemVendaVENDA_ID: TIntegerField;
    QItemVendaPRODUTOS_ID: TIntegerField;
    QItemVendaQUANTIDADE: TFMTBCDField;
    QItemVendaPRECO: TFMTBCDField;
    CDSVendaQItemVenda: TDataSetField;
    CDSTroca: TClientDataSet;
    CDSTrocaTMax: TAggregateField;
    QTroca: TSQLDataSet;
    QTrocaID: TIntegerField;
    QTrocaDATATROCA: TDateField;
    QTrocaTOTALTROCADO: TFMTBCDField;
    QTrocaOBS: TBlobField;
    QTrocaVENDA_ID: TIntegerField;
    CDSTrocaID: TIntegerField;
    CDSTrocaDATATROCA: TDateField;
    CDSTrocaTOTALTROCADO: TFMTBCDField;
    CDSTrocaOBS: TBlobField;
    CDSTrocaVENDA_ID: TIntegerField;
    DSTroca: TDataSource;
    QItemTroca: TSQLDataSet;
    CDSItemTroca: TClientDataSet;
    CDSItemTrocaTMax: TAggregateField;
    QItemTrocaID: TIntegerField;
    QItemTrocaTROCA_ID: TIntegerField;
    QItemTrocaPRODUTOS_ID: TIntegerField;
    QItemTrocaQUANTIDADE: TFMTBCDField;
    QItemTrocaPRECO: TFMTBCDField;
    CDSTrocaQItemTroca: TDataSetField;
    CDSItemVendaID: TIntegerField;
    CDSItemVendaVENDA_ID: TIntegerField;
    CDSItemVendaPRODUTOS_ID: TIntegerField;
    CDSItemVendaQUANTIDADE: TFMTBCDField;
    CDSItemVendaPRECO: TFMTBCDField;
    CDSItemTrocaID: TIntegerField;
    CDSItemTrocaTROCA_ID: TIntegerField;
    CDSItemTrocaPRODUTOS_ID: TIntegerField;
    CDSItemTrocaQUANTIDADE: TFMTBCDField;
    CDSItemTrocaPRECO: TFMTBCDField;
    CDSItemVendaLKPProduto: TStringField;
    CDSVendaLKPCliente: TStringField;
    CDSTrocaLKPCliente: TStringField;
    CDSItemTrocaLKPProduto: TStringField;
    CDSItemVendaTotal: TFloatField;
    CDSItemVendaTTotal: TAggregateField;
    procedure CDSProdutoAfterDelete(DataSet: TDataSet);
    procedure CDSProdutoAfterPost(DataSet: TDataSet);
    procedure CDSProdutoNewRecord(DataSet: TDataSet);
    procedure DataModuleCreate(Sender: TObject);
    procedure CDSProdutoReconcileError(DataSet: TCustomClientDataSet;
      E: EReconcileError; UpdateKind: TUpdateKind;
      var Action: TReconcileAction);
    procedure CDSClienteAfterDelete(DataSet: TDataSet);
    procedure CDSClienteAfterPost(DataSet: TDataSet);
    procedure CDSClienteNewRecord(DataSet: TDataSet);
    procedure CDSItemVendaCalcFields(DataSet: TDataSet);
    procedure CDSVendaAfterDelete(DataSet: TDataSet);
    procedure CDSVendaAfterPost(DataSet: TDataSet);
    procedure CDSVendaNewRecord(DataSet: TDataSet);
    procedure CDSItemVendaNewRecord(DataSet: TDataSet);
    procedure CDSTrocaNewRecord(DataSet: TDataSet);
    procedure CDSItemTrocaNewRecord(DataSet: TDataSet);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Dm: TDm;

implementation

{$R *.dfm}

uses UFuncoes;

procedure TDm.CDSClienteAfterDelete(DataSet: TDataSet);
begin
  CDSCliente.ApplyUpdates(0);
end;

procedure TDm.CDSClienteAfterPost(DataSet: TDataSet);
begin
  CDSCliente.ApplyUpdates(0);
end;

procedure TDm.CDSClienteNewRecord(DataSet: TDataSet);
begin
  CDSClienteID.AsInteger := StrToIntDef(VarToStr(DM.CDSClienteID.Value),0)+1;
end;

procedure TDm.CDSItemTrocaNewRecord(DataSet: TDataSet);
begin
  CDSItemTrocaID.AsInteger := StrToIntDef(VarToStr(DM.CDSItemTrocaTMax.Value),0)+1;
end;

procedure TDm.CDSItemVendaCalcFields(DataSet: TDataSet);
begin
  CDSItemVendaTotal.AsFloat := CDSItemVendaQUANTIDADE.AsFloat * CDSItemVendaPRECO.AsFloat;
  if CDSVenda.State in [dsEdit, dsInsert] then
    CDSVendaTOTALVENDIDO.AsFloat := StrToFloatDef(VarToStr(CDSItemVendaTTotal.Value), 0);
end;

procedure TDm.CDSItemVendaNewRecord(DataSet: TDataSet);
begin
  CDSItemVendaID.AsInteger := StrToIntDef(VarToStr(CDSItemVendaID.Value),0)+1;
  CDSItemVendaVENDA_ID.AsInteger := CDSVendaID.AsInteger;
end;

procedure TDm.CDSProdutoAfterDelete(DataSet: TDataSet);
begin
  CDSProduto.ApplyUpdates(0);
end;

procedure TDm.CDSProdutoAfterPost(DataSet: TDataSet);
begin
  CDSProduto.ApplyUpdates(0);
end;

procedure TDm.CDSProdutoNewRecord(DataSet: TDataSet);
begin
  CDSProdutoID.AsInteger := StrToIntDef(VarToStr(DM.CDSProdutoTMax.Value),0)+1;
end;

procedure TDm.CDSProdutoReconcileError(DataSet: TCustomClientDataSet;
  E: EReconcileError; UpdateKind: TUpdateKind; var Action: TReconcileAction);
begin
  showmessage('Erro:' + E.Message);
end;

procedure TDm.CDSTrocaNewRecord(DataSet: TDataSet);
begin
  CDSTrocaID.AsInteger := StrToIntDef(VarToStr(DM.CDSTrocaTMax.Value),0)+1;
end;

procedure TDm.CDSVendaAfterDelete(DataSet: TDataSet);
begin
  CDSVenda.ApplyUpdates(0);
end;

procedure TDm.CDSVendaAfterPost(DataSet: TDataSet);
begin
  CDSVenda.ApplyUpdates(0);
end;

procedure TDm.CDSVendaNewRecord(DataSet: TDataSet);
begin
  CDSVendaID.AsInteger := StrToIntDef(VarToStr(DM.CDSVendaTMax.Value),0)+1;
end;

procedure TDm.DataModuleCreate(Sender: TObject);
const ARQ: String = 'Digi.ini';
var v: byte;
begin
  if FileExists(ExtractFilePath(Application.ExeName) + ARQ) then
    SQLConnection.params.LoadFromFile(ExtractFilePath(Application.ExeName) + ARQ)
  else
    SQLConnection.params.SaveToFile(ExtractFilePath(Application.ExeName) + ARQ);
  SQLConnection.Connected := True;

  try
    v := ExecSql('SELECT ID FROM VERSAO');
  except
    v := 0;
  end;
  if v = 0 then
  begin
    ExecSQL('CREATE TABLE VERSAO (ID INTEGER NOT NULL);', True);
    ExecSQL('ALTER TABLE VERSAO ADD CONSTRAINT PK_VERSAO PRIMARY KEY (ID);', True);
    ExecSQL('INSERT INTO VERSAO (ID) VALUES (1);', True);
  end;
  if v < 1 then
  begin
//    ExecSQL('ALTER TABLE ... ;', True);
  end;
  ExecSQL('UPDATE VERSAO SET ID = 1;', True);
end;

end.

